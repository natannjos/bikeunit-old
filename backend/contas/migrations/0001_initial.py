# Generated by Django 2.0.3 on 2018-03-16 14:10

import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import localflavor.br.models
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(help_text='Seu nome será usado para identifica-lo de forma única na plataforma', max_length=50, unique=True, validators=[django.core.validators.RegexValidator(re.compile('/(?=^.{2,60}$)^[A-ZÀÁÂĖÈÉÊÌÍÒÓÔÕÙÚÛÇ][a-zàáâãèéêìíóôõùúç]+(?:[ ](?:das?|dos?|de|e|[A-Z][a-z]+))*$/'), 'Informe um nome de usuário válido', 'este valor deve conter apenas letras e espaços', 'invalid')], verbose_name='Nome')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('sexo', models.CharField(blank=True, choices=[('1', 'Masculino'), ('2', 'Feminino')], max_length=1, null=True, verbose_name='Sexo')),
                ('nascimento', models.DateField(verbose_name='Data de Nascimento')),
                ('telefone', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(re.compile('^[(\\.](\\d{2})[)\\.]?(\\d{4,5})[-\\.]?(\\d{4})$'))], verbose_name='Telefone')),
                ('tel_emergencia', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(re.compile('^[(\\.](\\d{2})[)\\.]?(\\d{4,5})[-\\.]?(\\d{4})$'))], verbose_name='Telefone de emergências')),
                ('cpf', models.CharField(blank=True, max_length=14, null=True, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^(\\d{3})\\.(\\d{3})\\.(\\d{3})-(\\d{2})$'))], verbose_name='CPF')),
                ('cep', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(re.compile('^[(\\.](\\d{2})[)\\.]?(\\d{4,5})[-\\.]?(\\d{4})$'))], verbose_name='CEP')),
                ('rua', models.CharField(max_length=50, verbose_name='Endereço')),
                ('complemento', models.TextField(max_length=100, verbose_name='Complemento')),
                ('bairro', models.CharField(max_length=50, verbose_name='Bairro')),
                ('cidade', models.CharField(max_length=50, verbose_name='Cidade')),
                ('estado', localflavor.br.models.BRStateField(max_length=2, verbose_name='Estado')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Equipe')),
                ('is_admin', models.BooleanField(default=False, verbose_name='Admin')),
                ('is_active', models.BooleanField(default=True, verbose_name='Ativo')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='Data de Entrada')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
                'ordering': ['username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
